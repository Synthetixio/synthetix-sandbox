name = "synthetix-sandbox"
version = "3.1.2"
description = "Synthetix Sandbox"

[setting.user]
defaultValue="0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.synthetix]
defaultValue="synthetix:latest"

[setting.spotMarket]
defaultValue="synthetix-spot-market:latest"

[setting.perpsMarket]
defaultValue="synthetix-perps-market:latest"

[setting.poolId]
defaultValue = "1"

[setting.accountId]
defaultValue = "1"

[import.Multicall]
source = "multicall:latest"

# Provision collateral token
[provision.collateralToken]
source = "mintable-token:latest"

# Provision Chainlink mock for collateral token ($2)
[provision.collateralChainlinkMock]
source = "chainlink-mock-v3-aggregator:latest"
options.initialAnswer = "<%= parseEther('2') %>"

# Provision Synthetix core and oracle manager
[provision.synthetix]
source = "<%= settings.synthetix %>"
options.owner = "<%= settings.user %>"

# Register oracle manager node for collateral token
[invoke.registerCollateralPriceNode]
target = ["synthetix.oracle_manager.Proxy"]
func = "registerNode"
args = [
    3, # Type for Chainlink aggregator
    "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [imports.collateralChainlinkMock.contracts.MockV3Aggregator.address, 0, 18]) %>",
    [],
]
extra.tkn_oracle_id.event = "NodeRegistered"
extra.tkn_oracle_id.arg = 0
depends = ["provision.synthetix", "provision.collateralChainlinkMock"]

# Configure collateral token as collateral for core
[invoke.configureTknCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureCollateral"
args = [
  { tokenAddress = "<%= imports.collateralToken.contracts.MintableToken.address %>", oracleNodeId = "<%= extras.tkn_oracle_id %>", issuanceRatioD18 = "<%= parseEther('2') %>", liquidationRatioD18 = "<%= parseEther('1.5') %>", liquidationRewardD18 = "<%= parseEther('1') %>", minDelegationD18 = "<%= parseEther('1') %>", depositingEnabled = true }
]
depends = ["invoke.registerCollateralPriceNode", "provision.collateralToken"]

[invoke.allowAllRegisterMarket]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
  "<%= formatBytes32String('registerMarket') %>",
  true
]

depends = ["provision.synthetix"]

[invoke.allowAllCreatePool]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
  "<%= formatBytes32String('createPool') %>",
  true
]

depends = ["provision.synthetix"]

# Create pool
[invoke.createPool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createPool"
args = [
    "<%= settings.poolId %>",
    "<%= settings.user %>"
]
depends=["invoke.allowAllCreatePool"]

# Set pool as preferred
[invoke.setPreferredPool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPreferredPool"
args = [
    "<%= settings.poolId %>",
]
depends=["invoke.createPool"]

# User receives collateral token
[invoke.mintCollateral]
target = ["collateralToken.MintableToken"]
func = "mint"
args = [
    "<%= parseEther('100000000') %>",
    "<%= settings.user %>"
]
depends=["provision.collateralToken"]

# User creates account
[invoke.createAccount]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createAccount(uint128)"
args = ["<%= settings.accountId %>"]
extras.accountId.event = "AccountCreated"
extras.accountId.arg = 0
depends = ["provision.synthetix"]

# User approves transfer of collateral
[invoke.approveDeposit]
target = ["collateralToken.MintableToken"]
from = "<%= settings.user %>"
func = "approve"
args = [
    "<%= imports.synthetix.contracts.CoreProxy.address %>",
    "<%= parseEther('100000000') %>",
]
depends=["provision.synthetix", "invoke.mintCollateral"]

# User deposits collateral token
[invoke.depositCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "deposit"
args = [
    "<%= settings.accountId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('100000000') %>",
]
depends=["invoke.createAccount", "invoke.approveDeposit"]

# User delegates to pool
[invoke.delegateCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "delegateCollateral"
args = [
    "<%= settings.accountId %>",
    "<%= settings.poolId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('100000000') %>",
    "<%= parseEther('1') %>"
]
depends=["invoke.depositCollateral"]

# User mints quarter of collateral value
[invoke.mintStablecoins]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "mintUsd"
args = [
    "<%= settings.accountId %>",
    "<%= settings.poolId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('500000') %>"
]
depends=["invoke.delegateCollateral"]

# Set the minimum liquidity ratio
[invoke.setMinimumLiquidityRatio]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= parseEther('2') %>"]
depends = ["provision.synthetix"]

# Provision the spot market factory
[provision.spotMarket]
source = "<%= settings.spotMarket %>"
options.coreProxyOwner = "<%= settings.user %>"
options.owner = "<%= settings.user %>"
options.synthetixPackage = "<%= settings.synthetix %>"

depends = ["provision.synthetix"]

# Create snxTKN Synth
[invoke.createSynth]
target = ["spotMarket.SpotMarketProxy"]
func = "createSynth"
from = "<%= settings.user %>"
args = ["Synthetic Token", "snxTKN", "<%= settings.user %>"]
extra.synthMarketId.event = "SynthRegistered"
extra.synthMarketId.arg = 0
depends = ["provision.spotMarket"]

# Set oracle nodes for snxTKN price
[invoke.updateSynthPriceData]
target = ["spotMarket.SpotMarketProxy"]
func = "updatePriceData"
from = "<%= settings.user %>"
args = ["<%= extras.synthMarketId %>", "<%= extras.tkn_oracle_id %>", "<%= extras.tkn_oracle_id %>"]
depends = ['invoke.createSynth', 'invoke.registerCollateralPriceNode']

# Add a 1% fixed feed on atomic exchanges
[invoke.addAtomicFixedFee]
target = ["spotMarket.SpotMarketProxy"]
func = "setAtomicFixedFee"
from = "<%= settings.user %>"
args = ["<%= extras.synthMarketId %>", "<%= parseEther('0.01') %>"]
depends = ['invoke.createSynth']

# Allow snxTKN market to deposit unlimited TKN for wrappers
[invoke.setMarketCollateralSupplyCap]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureMaximumMarketCollateral"
args = ["<%= extras.synthMarketId %>", "<%= imports.collateralToken.contracts.MintableToken.address %>", "<%= MaxUint256 %>"]
depends = ['invoke.createSynth', 'provision.collateralToken']

# Initialize wrapper functionality on snxTKN market with an unlimited cap
[invoke.initializeWrapper]
target = ["spotMarket.SpotMarketProxy"]
func = "setWrapper"
from = "<%= settings.user %>"
args = ["<%= extras.synthMarketId %>", "<%= imports.collateralToken.contracts.MintableToken.address %>", "<%= MaxUint256 %>"]
depends = ['invoke.setMarketCollateralSupplyCap']

# Set Pool Configuration
[invoke.setPoolConfiguration]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolConfiguration"
args = [
    "<%= settings.poolId %>",
    [
        { marketId = "<%= extras.synthMarketId %>", weightD18 = "1", maxDebtShareValueD18 = "1000000000000000000" },
    ]
]
depends=["invoke.createPool", "invoke.updateSynthPriceData"]

# Provision the perps market factory
[provision.perpsMarket]
source = "<%= settings.perpsMarket %>"
options.coreProxyOwner = "<%= settings.user %>"
options.owner = "<%= settings.user %>"
options.synthetixPackage = "<%= settings.synthetix %>"
options.spotMarketPackage = "<%= settings.spotMarket %>"

depends = ["provision.spotMarket"]

# Allow anyone to create a perps market
[invoke.allowAllCreatePerpsMarket]
target = ["perpsMarket.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
  "<%= formatBytes32String('createMarket') %>",
  true
]
depends=["provision.perpsMarket"]

# Allow anyone to create a perps account
[invoke.allowCreatePerpsAccount]
target = ["perpsMarket.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = [
    "<%= formatBytes32String('createAccount') %>",
    true
]
depends = ["provision.perpsMarket"]

# Create ETH Perp Market
[invoke.createPerpsMarket]
target = ["perpsMarket.PerpsMarketProxy"]
func = "createMarket"
from = "<%= settings.user %>"
args = ["Ethereum", "ETH", "<%= settings.user %>"]
extra.perpsMarketId.event = "MarketRegistered"
extra.perpsMarketId.arg = 0
depends = ["invoke.allowCreatePerpsAccount"]

# Update Price Feed for ETH Perp Market
[invoke.updatePriceFeed]
target = ["perpsMarket.PerpsMarketProxy"]
func = "updatePriceData"
from = "<%= settings.user %>"
args = ["<%= extras.perpsMarketId %>", "<%= extras.tkn_oracle_id %>"]
depends = ["invoke.registerCollateralPriceNode", "provision.collateralToken", "invoke.createPerpsMarket"]

# Set max collateral amount for synth
[invoke.setMaxCollateralAmount]
target = ["perpsMarket.PerpsMarketProxy"]
func = "setMaxCollateralAmount"
from = "<%= settings.user %>"
args = ["0", "<%= MaxUint256 %>"]
depends = ["provision.perpsMarket"]
