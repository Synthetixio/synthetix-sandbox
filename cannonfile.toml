name = "synthetix-sandbox"
version = "0.1"
description = "Synthetix Sandbox"

[setting.user]
defaultValue="0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.synthetix]
defaultValue="synthetix:latest"

[setting.spotMarket]
defaultValue="spot-market:latest"

[setting.poolId]
defaultValue = "1"

# Provision Collateral Token
[provision.collateralToken]
source = "mintable-token:latest"

# Provision Chainlink Mock for Collateral Token ($2)
[provision.collateralChaininkMock]
source = "chainlink-mock-v3-aggregator:latest"
initialAnswer = "2000000000000000000"

# Provision Synthetix Core and Oracle Manager
[provision.synthetix]
source = "<%= settings.synthetix %>"
owner = "<%= settings.user %>"

# Register Oracle Manager Node for Collateral Token


# Configure Collateral Token as Collateral


# Create Pool
[invoke.createPool]
target = ["system.CoreProxy.address"]
from = "<%= settings.poolOwner %>"
func = "createPool"
args = [
    "<%= settings.poolId %>",
    "<%= settings.poolOwner %>",
]
depends=["provision.synthetix"]

# Set Pool as 'Preferred'
[invoke.setPreferredPool]
target = ["synthetix.CoreProxy.address"]
from = "owner"
func = "setPreferredPool"
args = [
    "<%= settings.poolId %>",
]
depends=["invoke.createPool"]

# User receives collateral token
[invoke.mintCollateral]
target = ["imports.collateralToken.address"]
args = [
    "<%= parseEther(1000000) =>",
]
depends=["provision.collateralToken"]

# User deposits collateral token


# User delegates to pool


# User mints half of collateral value
[invoke.mintStablecoins]
target = ["imports.collateralToken.address"]
args = [
    "<%= parseEther(1000000) =>",
]
depends=["provision.collateralToken"]

# Provision Spot Market
[provision.spotMarket]
source = "<%= settings.spotMarket %>"
owner = "<%= settings.user %>"

# Create snxTKN Synth
[invoke.registerSynth]
target = ["imports.spotMarket.address"]
func = "createSynth"
from = "<%= settings.user %>"
args = ["Synthetic Token", "snxTKN", "<%= settings.user %>"]
depends = ['provision.spotMarket']
extra.synth_market_id.event = "SynthRegistered"
extra.synth_market_id.arg = 0

# Allow market to deposit TKN collateral

# Initialize wrapper

# Set oracle nodes for spot market price
[invoke.updateSynthPriceData]
target = ["imports.spotMarket.address"]
func = "updatePriceData"
from = "<%= settings.user %>"
args = ["<%= extras.synth_market_id %>", "<%= extras.snx_eth_oracle_id %>", "<%= extras.snx_eth_oracle_id %>"]
depends = ['invoke.registerSynth']

# Add a settlement strategy
[invoke.addSettlementStrategy]
target = ["imports.spotMarket.address"]
func = "addSettlementStrategy"
from = "<%= settings.user %>"
args = ["<%= extras.synth_market_id %>", { strategyType = 1, settlementDelay = 1, settlementWindowDuration = 120, priceVerificationContract = "<%= settings.chainlink_verification_contract %>", feedId = "ETH-USD", url = "https://mercury-srv.chain.link/client" }]
depends = ['invoke.registerSynth']

